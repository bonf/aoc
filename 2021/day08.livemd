# Day 8

## Setup

```elixir
Mix.install([{:kino, "~> 0.4.1"}])
```

## Input

```elixir
input = Kino.Input.textarea("input")
```

## Common Input parsing

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input =
  Kino.Input.read(input)
  |> String.split(["| ", " | \n", "\n"], trim: true)
  |> Enum.chunk_every(2)
```

## Part 1

```elixir
input
|> Enum.map(fn [_, b] ->
  String.split(b, " ", trim: true)
  |> Enum.map(&String.to_charlist/1)
end)
|> Enum.map(fn output_digits ->
  output_digits
  |> Enum.filter(&(length(&1) in [2, 3, 4, 7]))
  |> Enum.count()
end)
|> Enum.sum()
```

## Part 2

```elixir
# 0 => 6 ++
# 1 => 2 ++
# 2 => 5 
# 3 => 5 ++
# 4 => 4 ++
# 5 => 5 
# 6 => 6 ++
# 7 => 3 ++
# 8 => 7 ++
# 9 => 6 ++

defmodule Part2 do
  def run(input) do
    Enum.map(input, fn [i, o] -> calc_row([i, o]) end)
    |> Enum.sum()
  end

  def calc_row([input, output]) do
    input =
      input
      |> String.split(" ", trim: true)
      |> Enum.map(&(&1 |> String.to_charlist() |> Enum.sort()))
      |> Enum.uniq()

    [one] = input |> Enum.filter(&(length(&1) == 2))
    [four] = input |> Enum.filter(&(length(&1) == 4))
    [seven] = input |> Enum.filter(&(length(&1) == 3))
    [eight] = input |> Enum.filter(&(length(&1) == 7))
    [nine] = Enum.filter(input, &(four -- &1 == [])) -- [eight, four]
    [zero] = Enum.filter(input, &(length(&1) == 6 && seven -- &1 == [])) -- [nine]
    [six] = Enum.filter(input, &(length(&1) == 6)) -- [nine, zero]
    [two] = Enum.filter(input, &(length(&1) == 5 && length(&1 -- four) == 3))
    [three] = Enum.filter(input, &(length(&1) == 5 && length(&1 -- seven) == 2))
    [five] = Enum.filter(input, &(length(&1) == 5)) -- [three, two]

    mapping = %{
      zero => 0,
      one => 1,
      two => 2,
      three => 3,
      four => 4,
      five => 5,
      six => 6,
      seven => 7,
      eight => 8,
      nine => 9
    }

    output
    |> String.split()
    |> Enum.map(&(&1 |> String.to_charlist() |> Enum.sort()))
    |> Enum.reduce("", fn x, acc -> "#{acc}#{mapping[x]}" end)
    |> String.to_integer()
  end
end

Part2.run(input)
```
