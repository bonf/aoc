# 2022- Day 5

## Section

```elixir
Mix.install([{:kino, "~> 0.4.1"}])
```

```elixir
input = Kino.Input.textarea("input")
```

## Part 1

```elixir
defmodule Day5 do
  def part1(input) do
    input
    |> parse()
    |> move(:part1)
  end

  def part2(input) do
    input
    |> parse()
    |> move(:part2)
  end

  defp move({stacks, moves}, part) do
    final_stacks =
      Enum.reduce(moves, stacks, fn move, acc ->
        step(acc, move, part)
      end)

    Map.keys(final_stacks)
    |> Enum.sort()
    |> Enum.map(&Enum.at(final_stacks[&1], -1))
    |> Enum.join("")
    |> IO.puts()
  end

  defp step(stacks, {qty, from, to}, part) do
    from_stack = stacks[from]

    [from_stack, items] =
      case length(from_stack) - qty do
        0 ->
          [[], from_stack]

        n ->
          {a, b} = Enum.split(from_stack, n)
          [a, b]
      end

    to_stack = stacks[to] ++ arrange_items(items, part)

    stacks
    |> Map.put(from, from_stack)
    |> Map.put(to, to_stack)
  end

  defp arrange_items(items, :part1), do: Enum.reverse(items)
  defp arrange_items(items, :part2), do: items

  defp parse(input) do
    [stacks, moves] =
      input
      |> String.split("\n\n", trim: true)

    {parse_stacks(stacks), parse_moves(moves)}
  end

  defp parse_stacks(lines) do
    groups =
      lines
      |> String.split("\n")
      |> Enum.map(&String.to_charlist(&1))
      |> Enum.map(&Enum.chunk_every(&1, 3, 4, :discard))

    [h | t] = Enum.reverse(groups)

    Enum.reduce(Enum.with_index(h), %{}, fn {num, idx}, acc ->
      stack =
        Enum.map(t, &Enum.at(&1, idx))
        |> Enum.reject(&(&1 == '   '))
        |> Enum.map(&List.to_string(&1))
        |> Enum.map(&String.replace(&1, ~r/[^A-Z]/, ""))

      key = num |> List.to_string() |> String.trim() |> String.to_integer()
      Map.put(acc, key, stack)
    end)
  end

  defp parse_moves(lines) do
    lines
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [_, a, _, b, _, c] = String.split(line, " ")
      {String.to_integer(a), String.to_integer(b), String.to_integer(c)}
    end)
  end
end

Kino.Input.read(input)
|> Day5.part1()
```

## Part 2

```elixir
Kino.Input.read(input)
|> Day5.part2()
```
